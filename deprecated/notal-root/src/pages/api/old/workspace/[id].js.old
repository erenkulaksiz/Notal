const admin = require("firebase-admin");
const googleService = JSON.parse(process.env.NEXT_PUBLIC_GOOGLE_SERVICE);
if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.cert(googleService),
        //databaseURL: firebaseConfig.databaseURL
    });
}
const { connectToDatabase } = require('../../../../lib/mongodb');
const ObjectId = require('mongodb').ObjectId;

const { db } = await connectToDatabase();
const workspacesCollection = db.collection("workspaces");
const usersCollection = db.collection("users");

export default async function handler(req, res) {

    const reject = () => res.status(400).send({ success: false, error: "invalid-params" });

    const { id } = req.query;
    if (req.method !== "POST") return reject();
    if (!id) return reject();

    Log.debug("Getting workspace id: ", id);

    const workspace = await workspacesCollection.findOne({ "_id": ObjectId(id) });

    if (!workspace) return res.status(400).send({ success: false, error: "not-found" });

    if (workspace.workspaceVisible) {
        Log.debug("Getting workspace id: ", id);
        const user = await usersCollection.findOne({ "uid": workspace.owner });
        if (!user) return res.status(400).send({
            success: false,
            error: "please report this to erenkulaksz@gmail.com",
            reason: "workspace owner doesnt match"
        });
        res.status(200).send({
            success: true,
            data: {
                ...workspace,
                username: user.username,
                fullname: user.fullname ?? "",
                avatar: user.avatar ?? ""
            }
        });
    } else if (!workspace.workspaceVisible) {
        const body = JSON.parse(req.body);
        const { uid } = body ?? {};
        if (!uid) return reject();

        const bearer = req.headers['authorization'];
        if (!bearer) return reject();
        const bearerToken = bearer.split(' ')[1];
        if (typeof bearerToken == "undefined") return reject();

        Log.debug("Getting workspace id: ", id, " uid:", uid);
        return admin.auth().verifyIdToken(bearerToken).then(async (decodedToken) => {
            if (decodedToken.user_id !== uid) return res.status(400).send({ success: false, error: "user-workspace-private" });

            const user = await usersCollection.findOne({ "uid": workspace.owner });

            if (!user) return res.status(400).send({
                success: false,
                error: "please report this to erenkulaksz@gmail.com",
                reason: "workspace owner doesnt match"
            });

            return res.status(200).send({
                success: true,
                data: {
                    ...workspace,
                    username: user.username,
                    fullname: user.fullname ?? "",
                    avatar: user.avatar ?? ""
                }
            });
        }).catch(error => {
            return res.status(400).json({ success: false, error });
        });
    }
}