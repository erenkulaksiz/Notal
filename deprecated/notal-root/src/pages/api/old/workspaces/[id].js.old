const admin = require("firebase-admin");
const googleService = JSON.parse(process.env.NEXT_PUBLIC_GOOGLE_SERVICE);
if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.cert(googleService),
        //databaseURL: firebaseConfig.databaseURL
    });
}
const { connectToDatabase } = require('../../../../lib/mongodb');
const ObjectId = require('mongodb').ObjectId;

const { db } = await connectToDatabase();
const workspacesCollection = db.collection("workspaces");

export default async function handler(req, res) {

    const reject = () => res.status(400).send({ success: false, error: "invalid-params" });

    const bearer = req.headers['authorization'];
    if (!bearer) return reject();
    const bearerToken = bearer.split(' ')[1];
    if (typeof bearerToken == "undefined") return reject();
    const { id } = req.query;

    if (req.method == "DELETE") {
        return await admin.auth().verifyIdToken(bearerToken).then(async (decodedToken) => {
            Log.debug("Deleting workspace USERID", decodedToken.user_id, " ID", id);
            const workspace = await workspacesCollection.findOne({ "_id": ObjectId(id) });
            if (!workspace) return reject();
            if (workspace.owner !== decodedToken.user_id) return reject();
            await workspacesCollection.deleteOne({ "_id": ObjectId(id) })
                .then(() => {
                    return res.status(200).send({ success: true });
                });
        }).catch(error => {
            Log.debug("error: ", error);
            return res.status(400).json({ success: false, error: { code: error.code } });
        });
    }
}